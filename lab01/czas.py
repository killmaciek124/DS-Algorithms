import math
from timeit import default_timer as timer
def f1(n):
    s=0
    for j in range(1, n):
      s=s+1/j
    return s

def f2(n):
    s=0
    for j in range(1, n):
      for k in range(1, n):
        s=s+k/j
    return s

def f3(n):
    s=0
    for j in range(1, n):
      for k in range(j, n):
        s=s+k/j
    return s   
        
def f4(n):
    s=0
    for j in range(1, n):
      k=2
      while k<=n:
        s=s+k/j
        k=k*2
    return s           

def f5(n):
    s=0
    k=2
    while k<=n:
       s=s+1/k
       k=k*2
    return s   

nn = [20000000, 40000000, 80000000, 160000000, 320000000]

for n in nn:  
  start = timer()
  f5(n)
  stop = timer()
  Tn=stop-start
  Fn=n # zadaniem jest odgadnac czy tu jest n^2, n, 1 .....
  # ... jaka zlozonosc czasowa kazdej z tych funkkcji. I potem wyniki z programu podeslac jako dowod
  print(n, Tn, Fn/Tn)

# inne funkcje czasu:

# Fn=math.log(n,2)
# Fn=n
# Fn=100*n
# Fn=n*math.log(n,2)
# Fn=n*n

# ROZWIAZANIE: (middle columns)

#f1 : ==================================
#Fn=n bo: 

# (2000, 0.0003020763397216797, 6620842.936069455)
# (4000, 0.0004069805145263672, 9828480.374926772)
# (8000, 0.0007150173187255859, 11188540.18006002)
# (16000, 0.002276182174682617, 7029314.339583115)
# (32000, 0.005015850067138672, 6379776.0243369145)

#f2 : ==================================
#Fn=n^5 bo: 

# (2000, 0.5513389110565186, 3627.53282943053)
# (4000, 2.3745028972625732, 1684.563116183757)
# (8000, 9.63959789276123, 829.9101361901753)
# (16000, 38.313783168792725, 417.6042843253415)
# (32000, 157.55944895744324, 203.09794310491142)

#f3 : ==================================
#Fn=n^4 bo: 

# (2000, 0.2477278709411621, 8073.374999759395)
# (4000, 1.1076829433441162, 3611.141639433323)
# (8000, 4.656781196594238, 1717.9248202279382)
# (16000, 19.697872161865234, 812.2704761469487)
# (32000, 80.13386487960815, 399.33179371887644)

#f4 : ==================================
#Fn=2n bo: 

# (2000, 0.002605915069580078, 767484.7209515097)
# (4000, 0.005807161331176758, 688804.6968017408)
# (8000, 0.009142875671386719, 874998.2267654114)
# (16000, 0.026217937469482422, 610269.2104832403)
# (32000, 0.05505704879760742, 581215.3157288482)


#f5 : ================================== // TO DO! 
#Fn= bo: 

